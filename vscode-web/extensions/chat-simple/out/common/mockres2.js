"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockres2 = void 0;
exports.mockres2 = `我将为你创建后端 文件夹结构并实现基本的Socket.io服务器代码。以下是后端实现方案：\n\njellyvai-sss-ooo:c:\\Users\\vipuser\\Desktop\\testproj3\\party-game\\backend:add\njellyvai-sss-ooo:c:\\Users\\vipuser\\Desktop\\testproj3\\party-game\\backend\\src:add\njellyvai-sss-ooo:c:\\Users\\vipuser\\Desktop\\testproj3\\party-game\\backend\\src\\server.js:add\njellyvai-sss-ooo:c:\\Users\\vipuser\\Desktop\\testproj3\\party-game\\backend\\package.json:add\n\n以下是后端核心文件内容：\n\n1. 服务器入口文件 (server.js):\n\`\`\`javascript\nimport { Server } from 'socket.io';\nimport express from 'express';\nimport http from 'http';\nimport path from 'path';\n\nconst app = express();\nconst server = http.createServer(app);\nconst io = new Server(server, {\n    cors: {\n        origin: \"*\",\n        methods: [\"GET\", \"POST\"]\n    }\n});\n\n// 静态文件服务\napp.use(express.static(path.resolve('../public')));\n\n// 游戏状态\nconst gameState = {\n    players: new Map(),\n    gameStatus: 'lobby'\n};\n\nio.on('connection', (socket) => {\n    console.log(\`Player connected: \${socket.id}\`);\n    \n    // 新玩家加入\n    socket.on('player-join', (playerData) => {\n        playerData.id = socket.id;\n        gameState.players.set(socket.id, playerData);\n        \n        // 通知所有玩家有新玩家加入\n        io.emit('player-joined', playerData);\n        \n        // 发送当前游戏状态给新玩家\n        socket.emit('game-state', {\n            status: gameState.gameStatus,\n            players: Array.from(gameState.players.values())\n        });\n    });\n\n    // 处理玩家更新\n    socket.on('player-update', (playerState) => {\n        if (gameState.players.has(socket.id)) {\n            const player = gameState.players.get(socket.id);\n            Object.assign(player, playerState);\n            io.emit('player-updated', { id: socket.id, ...playerState });\n        }\n    });\n\n    // 玩家断开连接\n    socket.on('disconnect', () => {\n        console.log(\`Player disconnected: \${socket.id}\`);\n        gameState.players.delete(socket.id);\n        io.emit('player-left', socket.id);\n    });\n\n    // 游戏状态变更\n    socket.on('change-game-state', (newState) => {\n        gameState.gameStatus = newState;\n        io.emit('game-state-changed', newState);\n    });\n});\n\nconst PORT = process.env.PORT || 3000;\nserver.listen(PORT, () => {\n    console.log(\`Server running on port \${PORT}\`);\n});\n\`\`\`\n\n2. 后端 package.json:\n\`\`\`json\n{\n  \"name\": \"party-game-backend\",\n  \"version\": \"1.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"start\": \"node src/server.js\",\n    \"dev\": \"nodemon src/server.js\"\n  },\n  \"dependencies\": {\n    \"express\": \"^4.18.2\",\n    \"socket.io\": \"^4.7.2\"\n  },\n  \"devDependencies\": {\n    \"nodemon\": \"^3.0.2\"\n  }\n}\n\`\`\`\n\n3. 更新前端 package.json 以包含后端开发脚本:\n\`\`\`json\n{\n  \"name\": \"party-game\",\n  \"version\": \"1.0.0\",\n  \"description\": \"多人派对游戏\",\n  \"scripts\": {\n    \"start\": \"vite\",\n    \"build\": \"vite build\",\n    \"start-backend\": \"cd backend && npm run dev\",\n    \"start-all\": \"concurrently \\\"npm run start\\\" \\\"npm run start-backend\\\"\"\n  },\n  \"dependencies\": {\n    \"three\": \"^0.150.1\",\n    \"socket.io-client\": \"^4.4.1\"\n  },\n  \"devDependencies\": {\n    \"vite\": \"^4.0.0\",\n    \"concurrently\": \"^8.2.1\"\n  }\n}\n\`\`\`\n\n这个后端实现提供了以下功能：\n\n1. 玩家连接管理\n2. 游戏状态同步\n3. 玩家位置和状态更新\n4. 游戏状态变更通知\n5. 静态文件服务(用于前端构建产物)\n\n要运行完整系统：\n\n1. 在后端目录运行 \`npm install\`\n2. 在前 端目录运行 \`npm install\`\n3. 可以分别启动前后端，或使用 \`npm run start-all\` 同时启动\n\n后端架构特点：\n\n- 使用ES模块(通过package.json中的\"type\": \"module\")\n- 基于Socket.io的实时通信\n- 简单的游戏状 态管理\n- 支持CORS以便开发\n- 与前端共享静态文件\n\n你可以根据需要扩展这个后端，比如添加：\n- 房间系统\n- 游戏逻辑验证\n- 数据库集成\n- 认证系统\n- 更复杂的状态管理`;
//# sourceMappingURL=mockres2.js.map