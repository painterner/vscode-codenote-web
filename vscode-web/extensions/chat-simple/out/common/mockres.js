"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockres = void 0;
exports.mockres = "我将帮你创建一个基础的Three.js游戏框架。首先我们需要设置项目结构并创建必要的文件。\n\njellyvai-sss-ooo|index.html|add|\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>Three.js Game</title>\n    <style>\n        body { margin: 0; overflow: hidden; }\n        canvas { display: block; }\n    </style>\n</head>\n<body>\n    <script src=\"js/main.js\" type=\"module\"></script>\n</body>\n</html>\n```\n\njellyvai-sss-ooo|js/main.js|add|\n```javascript\nimport * as THREE from 'three';\n\n// 初始化场景、相机和渲染器\nconst scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\nconst renderer = new THREE.WebGLRenderer();\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement);\n\n// 添加立方体\nconst geometry = new THREE.BoxGeometry();\nconst material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\nconst cube = new THREE.Mesh(geometry, material);\nscene.add(cube);\n\ncamera.position.z = 5;\n\n// 动画循环\nfunction animate() {\n    requestAnimationFrame(animate);\n    \n    // 旋转立方体\n    cube.rotation.x += 0.01;\n    cube.rotation.y += 0.01;\n    \n    renderer.render(scene, camera);\n}\n\nanimate();\n\n// 响应窗口大小变化\nwindow.addEventListener('resize', () => {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n});\n```\n\njellyvai-sss-ooo|package.json|add|\n```json\n{\n  \"name\": \"threejs-game\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A simple Three.js game\",\n  \"main\": \"index.html\",\n  \"scripts\": {\n    \"start\": \"vite\",\n    \"build\": \"vite build\"\n  },\n  \"dependencies\": {\n    \"three\": \"^0.155.0\"\n  },\n  \"devDependencies\": {\n    \"vite\": \"^4.4.5\"\n  }\n}\n```\n\n这是一个基础的Three.js游戏框架，包含以下功能：\n1. 绿色旋转立方体作为基础游戏对象\n2. 响应式设计，自动适应窗口大小变化\n3. 使用Vite作为开发服务器\n\n要运行这个游戏，你需要：\n1. 安装Node.js\n2. 在项目目录运行 `npm install`\n3. 然后运行 `npm start`\n\n这只是一个起点，你可以在此基础上添加：\n- 游戏物理引擎（如Cannon.js）\n- 玩家控制器\n- 碰撞检测\n- 游戏关卡\n- 纹理和更复杂的3D模型\n\n需要我帮你扩展任何特定功能吗？";
//# sourceMappingURL=mockres.js.map